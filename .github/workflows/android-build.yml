name: Android Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy onnxtr Pillow setuptools crossenv  # Added crossenv

      # ADD THIS STEP after Python dependencies and before Build Python bridge
      - name: Set up Android NDK
        run: |
          ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.1.8937393"
          echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/25.1.8937393" >> $GITHUB_ENV

      # REPLACE the existing "Build Python bridge" step with this:
      - name: Build Python bridge for Android
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          cd python
          python build.py
          
          # Debug output
          echo "Listing built files:"
          find . -name "*.so"
          
          # Create Android library directories
          mkdir -p ../android/app/src/main/jniLibs/arm64-v8a
          mkdir -p ../android/app/src/main/jniLibs/armeabi-v7a
          
          # Copy the built .so files
          cp build/*arm64-v8a*/libocr_bridge.so ../android/app/src/main/jniLibs/arm64-v8a/ || {
            echo "Failed to copy arm64-v8a library"
            ls -R build/
            exit 1
          }
          cp build/*armeabi-v7a*/libocr_bridge.so ../android/app/src/main/jniLibs/armeabi-v7a/ || {
            echo "Failed to copy armeabi-v7a library"
            ls -R build/
            exit 1
          }
          
          echo "Libraries copied successfully"
          
          # Verify architectures
          echo "Verifying arm64-v8a library:"
          file ../android/app/src/main/jniLibs/arm64-v8a/libocr_bridge.so
          echo "Verifying armeabi-v7a library:"
          file ../android/app/src/main/jniLibs/armeabi-v7a/libocr_bridge.so

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3          

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2        

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          cache: true

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
          echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties

      - name: Make Gradlew Executable
        run: chmod +x android/gradlew

      - name: Ensure AndroidX is enabled
        run: |
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
                    
      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Clean Gradle
        run: cd android && ./gradlew clean        

      - name: Build Android APK
        run: flutter build apk --release

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk